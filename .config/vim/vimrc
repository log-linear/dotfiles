" General settings ===========================================================
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup
set viewdir=$XDG_DATA_HOME/vim/view
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after
let mapleader=","  " remap <leader>
set cursorline  " Cursor line highlight 
set showcmd  " show commands in status line
filetype on  " filetype detection
set notimeout  " No key sequence timeout
set clipboard+=unnamedplus  " yank to system clipboard via wl-clipboard or xclip 
set splitbelow splitright  " Splits open at the bottom and right 
set mouse=nv  " Enable mouse support
set scrolloff=3  " Always show one line above/below character
set sidescroll=3  " Ditto for horizontal scrolling
set number relativenumber 
set hidden  " Allow switching buffers before saving

" tabs to spaces
set expandtab
set tabstop=4
set shiftwidth=4

" search tweaks
set incsearch
set showmatch
set hlsearch

" Visual line guide at 80 characters
set colorcolumn=80
highlight ColorColumn ctermbg=238

" Replace all aliased to S.
nnoremap S :%s//g<Left><Left>  

" Esc/Ctrl + [ clears last search highlighting
noremap <esc> :let @/=""<CR>
noremap <C-[> :let @/=""<CR>

" Save file as sudo on files that require root permission
cnoremap w!! execute 'silent! write !sudo tee % >/dev/null' <bar> edit!

" Remap split navigation to CTRL + hjkl
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Remap split adjustments to CTRL + arrow keys
noremap <silent> <A-h> :vertical resize +3<CR>
noremap <silent> <A-l> :vertical resize -3<CR>
noremap <silent> <A-k> :resize -3<CR>
noremap <silent> <A-j> :resize +3<CR>

" Simple buffer switching
nnoremap <leader>q :bp <BAR> bd #<CR>
nnoremap <C-n> :bn<CR>
nnoremap <C-p> :bp<CR>
nnoremap <leader>vs :vsplit<CR>
nnoremap <leader>hs :split<CR>

" Start terminals
map <Leader>tt :new term://zsh<CR><C-\><C-n><C-w>k
map <Leader>tp :new term://zsh<CR>ipython<CR><C-\><C-n><C-w>k

" Escape terminal mode
tnoremap <C-x> <C-\><C-n>

" Disable ex mode
nnoremap Q <Nop>

" Filetype-specific settings =================================================

""" R 
" >> hotkey for R base pipe |>
autocmd FileType r imap >> <space>\|><space>
autocmd FileType rmd imap >> <space>\|><space>

" adjust tab widths
autocmd FileType r setlocal shiftwidth=2 tabstop=2
autocmd FileType rmd setlocal shiftwidth=2 tabstop=2

""" sh 
" adjust tab widths
autocmd FileType sh setlocal shiftwidth=2 tabstop=2

""" md 
" adjust tab widths
autocmd FileType markdown setlocal shiftwidth=2 tabstop=2

" Plugins ====================================================================

" Install vim-plug if not already available
if ! filereadable(system(
    \ 'echo -n "${XDG_CONFIG_HOME:-$HOME/.config}/vim/autoload/plug.vim"'))
  echo "Downloading junegunn/vim-plug to manage plugins..."
  silent !mkdir -p ${XDG_CONFIG_HOME:-$HOME/.config}/vim/autoload/
  silent !curl 
      \ "https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim" 
      \ > ${XDG_CONFIG_HOME:-$HOME/.config}/vim/autoload/plug.vim
  autocmd VimEnter * PlugInstall
endif 

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC | endif

call plug#begin(system(
  \ 'echo -n "${XDG_CONFIG_HOME:-$HOME/.config}/vim/plugged"'))

  " Functionality
  Plug 'neovim/nvim-lspconfig'  " native nvim language server
  Plug 'hrsh7th/nvim-cmp'  " lsp autocomplete engine
  Plug 'hrsh7th/cmp-nvim-lsp'  " lsp autocomplete source
  Plug 'ray-x/lsp_signature.nvim'  " signature support
  Plug 'tpope/vim-commentary'  " easy code commenting
  Plug 'jalvesaq/Nvim-R', {'branch': 'stable'}  " R support
  Plug 'preservim/nerdtree'  " file browser
  Plug 'tpope/vim-fugitive'  " git command support
  Plug 'mhinz/vim-signify'  " line-by-line git diff marks
  Plug 'karoliskoncevicius/vim-sendtowindow'  " Basic REPLing
  Plug 'tpope/vim-surround'  " Easisly change brackets, quotes, parentheses, etc
  Plug 'tpope/vim-repeat'  " Use . to repeat plugin keymaps
  Plug 'mhinz/vim-startify'  " fancy startup menu

  " Aesthetics
  Plug 'vim-airline/vim-airline'  " status bar
  Plug 'junegunn/goyo.vim'  " zen mode
  Plug 'morhetz/gruvbox'  " theme
  Plug 'ryanoasis/vim-devicons'  " Requires Nerd Font compatible font
  Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
  Plug 'ryanoasis/vim-devicons'  " Always load last
  Plug 'Yggdroot/indentLine'
call plug#end()

" sendtowindow ---------------------------------------------------------------


" Vim-airline ----------------------------------------------------------------
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

" indentline -----------------------------------------------------------------
let g:indentLine_char = '‚ñè'

" gruvbox --------------------------------------------------------------------
colorscheme gruvbox
let g:airline_theme = 'gruvbox'

" Goyo -----------------------------------------------------------------------
map <leader>f :Goyo \| set linebreak<CR>

" Nerd tree ------------------------------------------------------------------
map <leader>n :NERDTreeToggle<CR>
autocmd bufenter * if (winnr("$") == 1 
  \ && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

if has('nvim')
  let NERDTreeBookmarksFile = stdpath('data') . '/NERDTreeBookmarks'
else
  let NERDTreeBookmarksFile = '~/.vim' . '/NERDTreeBookmarks'
endif

" Show hidden files by default
let NERDTreeShowHidden=1

" enable relative line numbers
let NERDTreeShowLineNumbers=1
autocmd FileType nerdtree setlocal relativenumber

" Nvim-R ---------------------------------------------------------------------
let R_auto_start = 2  " Auto start on all .R/.Rmd files
let R_assign_map = '--'  " type -- for assignment operator: <-
let R_min_editor_width = 80  " set a minimum source editor width
let R_objbr_place = 'script,right'  " Open obj explorer on right
let R_objbr_opendf = 0  " Don't expand a dataframe to show columns by default
let R_pdfviewer = 'zathura'  " zathura as default PDF reader
let R_csv_app = 'terminal:vd'  " Use visidata as data.frame/matrix viewer

" Use radian console
let R_app = 'radian --no-history'
let R_cmd = 'R'
let R_hl_term = 0
let R_args = []  " if you had set any
let R_bracketed_paste = 1

" Press spacebar to send lines and selection to R console
vmap <CR> <Plug>RDSendSelection
nmap <CR> <Plug>RDSendLine

" signify --------------------------------------------------------------------
map <leader>hu :SignifyHunkUndo<CR>

" fugitive -------------------------------------------------------------------
nnoremap <leader>vd :Gvdiffsplit<CR>

" startify -------------------------------------------------------------------
let g:startify_lists = [
      \ { 'type': 'sessions',  'header': ['   Sessions']       },
      \ { 'type': 'files',     'header': ['   Recent']            },
      \ { 'type': 'commands',  'header': ['   Commands']       },
      \ ]

" LSP ========================================================================

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Signatures
  lsp_cfg = {
      hi_parameter = "Search",
      max_width = 72, 
      trigger_on_newline = true,
  }
  require "lsp_signature".on_attach(lsp_cfg)

  --Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-s>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)

end

-- Disable inline error messages
vim.lsp.handlers["textDocument/publishDiagnostics"] = vim.lsp.with(
    vim.lsp.diagnostic.on_publish_diagnostics, {
        virtual_text = false
    }
)

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'pyright', 'r_language_server', 'bashls' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end
EOF

" nvim-cmp -----------------------------------------------------------------

lua << EOF
-- Set completeopt to have a better completion experience
vim.o.completeopt = 'menuone,noselect'

-- nvim-cmp setup
local cmp = require 'cmp'
cmp.setup {
  mapping = {
    ['<C-p>'] = cmp.mapping.select_prev_item(),
    ['<C-n>'] = cmp.mapping.select_next_item(),
    ['<C-d>'] = cmp.mapping.scroll_docs(-4),
    ['<C-f>'] = cmp.mapping.scroll_docs(4),
    ['<C-Space>'] = cmp.mapping.complete(),
    ['<C-e>'] = cmp.mapping.close(),
    ['<CR>'] = cmp.mapping.confirm {
      behavior = cmp.ConfirmBehavior.Replace,
      select = true,
    },
  },
  sources = {
    { name = 'nvim_lsp' },
    { name = 'luasnip' },
  },
}
EOF

